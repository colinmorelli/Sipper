--- pjnath/src/pjnath/ice_strans.c	2017-03-02 21:11:02.000000000 -0500
+++ pjnath/src/pjnath/ice_strans.c	2017-04-20 10:57:58.000000000 -0400
@@ -1461,6 +1461,33 @@ PJ_DEF(pj_status_t) pj_ice_strans_sendto
     pj_grp_lock_release(ice_st->grp_lock);
 
     def_cand = &comp->cand_list[comp->default_cand];
+
+    
+    /* Verify that the candidate we've selected as a default matches the
+     * address family of the destination we're trying to send to. Unless
+     * a confirmed ICE binding request tells us otherwise, this ensures we
+     * don't try to send IPv6 over IPv4 and vice versa. Not doing this will
+     * prevent audio from flowing until ICE negotiation completes
+     */
+    const pj_addr_hdr *hdr = (const pj_addr_hdr *) dst_addr;
+    if (hdr->sa_family != def_cand->base_addr.addr.sa_family) {
+        int i, current_candidate = comp->default_cand;
+        
+        for (i=0; i<comp->cand_cnt; ++i) {
+            if (comp->cand_list[i].addr.addr.sa_family == hdr->sa_family &&
+                comp->cand_list[i].status == PJ_SUCCESS)
+            {
+                comp->default_cand = i;
+                def_cand = &comp->cand_list[comp->default_cand];
+                break;
+            }
+        }
+
+         PJ_LOG(4,(ice_st->obj_name,
+              "Automatically selected default candidate %d does not match address "
+              "family of the current ICE destination. Switching to new default %d", 
+              current_candidate, comp->default_cand));
+    }
     
     if (def_cand->status == PJ_SUCCESS) {
 	unsigned tp_idx = GET_TP_IDX(def_cand->transport_id);
@@ -2138,5 +2164,4 @@ static void turn_on_state(pj_turn_sock *
     pj_grp_lock_dec_ref(comp->ice_st->grp_lock);
 
     pj_log_pop_indent();
-}
-
+}
\ No newline at end of file
